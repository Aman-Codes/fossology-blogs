(self.webpackChunkfossology_blogs=self.webpackChunkfossology_blogs||[]).push([[7935],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=p(n),d=a,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||r;return n?o.createElement(m,s(s({ref:t},c),{},{components:n})):o.createElement(m,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},158:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return i},toc:function(){return l},default:function(){return c}});var o=n(2122),a=n(9756),r=(n(7294),n(3905)),s={},i={unversionedId:"docs/REST-API",id:"docs/REST-API",isDocsHomePage:!1,title:"Note",description:"This page represents use cases and goals of REST API, not the REST API itself.",source:"@site/docs/docs/REST-API.md",sourceDirName:"docs",slug:"/docs/REST-API",permalink:"/fossology-blogs/docs/docs/REST-API",editUrl:"https://github.com/Aman-Codes/fossology-blogs/edit/master/docs/docs/REST-API.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Programming-for-the-Job-Queue",permalink:"/fossology-blogs/docs/docs/Programming-for-the-Job-Queue"},next:{title:"Release-Notes",permalink:"/fossology-blogs/docs/docs/Release-Notes"}},l=[{value:"API Use Cases",id:"api-use-cases",children:[]},{value:"API Issues",id:"api-issues",children:[]},{value:"FOSSology RESTful interface",id:"fossology-restful-interface",children:[]},{value:"Need to specify in query:",id:"need-to-specify-in-query",children:[]},{value:"Query Examples",id:"query-examples",children:[]},{value:"Package fields",id:"package-fields",children:[]}],p={toc:l};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page represents use cases and goals of REST API, not the REST API itself.\nTo read about current REST API implementation, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fossology/fossology/wiki/FOSSology-REST-API"},"FOSSology REST API"),"."),(0,r.kt)("h2",{id:"api-use-cases"},"API Use Cases"),(0,r.kt)("p",null,"For the beginning the focus use cases are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Upload and server performs scan and the uploader gets scan results back. Note that a single request response loop would not work straight forwardly because the scan times might take longer than most time outs)"),(0,r.kt)("li",{parentName:"ol"},"Upload, server performs scan. Then a user, expert does some corrections and user can get report (SPDX, Writer) at later stage.")),(0,r.kt)("p",null,"At some later stage:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"User can check if a package has been uploaded by the SHA (SHA1) hash to check if a package has been uploaded to fossology and gets an upload id back (to retrieve scan and analysis results)")),(0,r.kt)("h2",{id:"api-issues"},"API Issues"),(0,r.kt)("p",null,"The API shall support some things"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Authentication should be the same as with the Web UI"),(0,r.kt)("li",{parentName:"ol"},"Versioning in the URL to capture the version of the REST API maybe"),(0,r.kt)("li",{parentName:"ol"},"Documentation of the REST API along with the implemented functionaly - generating automatically would be good. maybe doxygen is a tool for this."),(0,r.kt)("li",{parentName:"ol"},"Maybe trying to align the used technology stack with the existing REST API")),(0,r.kt)("h2",{id:"fossology-restful-interface"},"FOSSology RESTful interface"),(0,r.kt)("p",null,"Goal:\nProvide a simple HTTP interface for those needing to do their own data access.\nThis is not an sql replacement, or even a simple grammar, but rather a simple\nmethod to do common queries while hiding the complexities of sql data retrieval."),(0,r.kt)("p",null,"This is a proposal. The only api that has been implemented in a branch to date is the following, which returns a comma separated list of licenses in a single file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"wget -qO - --post-file unwind.h http://repo.fossology.org/?mod=agent_nomos_once\n\nSubstitute unwind.h for your file.\n")),(0,r.kt)("h2",{id:"need-to-specify-in-query"},"Need to specify in query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1) Does the query apply to a specific file, or every file in a repository file tree?\n    Only one of these may be specified.  Default is file.\n    &range=file\n    &range=tree\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"2) How to identify a file (range=file) or top of tree (range=tree).\n    Zero or more of these may be specified.  Default is whole repository.\n    &filepk={uploadtree_pk}   An uploadtree_pk is a fossology internal unique\n                              key to a file in an upload file hierarchy.\n                              e.g. &filepk=123\n    &filename={filename}      e.g. &filename=foo.c\n    &filepath={filepath}      e.g. &filepath=foo.tar.gz/A/B/myfile \n                                   &filepath=foo.c\n    &uploadpk={upload_pk}     An upload_pk is a fossology internal unique key\n                              to an uploaded file (which might be a simple file\n                              like foo.c or a container like RHEL.x.iso or foo.tar.\n                              e.g. &uploadpk=234\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'3) Query parameters.\n    Query parameters may be any table.column, or pseudo parameter (see 4).\n      e.g. &pkg_rpm.pkg_name="Pound-2.4-0.1.d.fc8.src.rpm" \n           &pkg_rpm.version=1.2.3\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'4) Operators\n    Query parameters may include simple operators.\n 4.1) >, <, =, !=, >=, <=  (the equal operator is implied in "version=1.2.3").  \n      Otherwise, the operator is included in the value string.\n      e.g. &pkg_rpm.version=">1.2.3" \n      e.g. &pkg_rpm.version=">=1.2.3"&pkg_rpm.version="&lt;2.1" \n 4.2) POSIX regular expressions \n      ~   matches regular expression, case sensitive\n      *  matches regular expression, case insensitive\n      !  Does not match regex, case sensitive\n      !~* Does not match regex, case insensitive\n      e.g. &filename="~\'^Pound\'"  To match all files whose names start with "Pound"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"5) Pseudo parameters/values\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"5.1) Input\n    latest   - latest agent version that produced result for the target.\n               This is the default when an agent version is not specified.\n    agent    - For some queries it may be important to specify which agent\n               produced the results you are interested.\n    agentrev - Fossology data (licenses and buckets) is persistent.  So there\n               may be data from multiple scans of the same data with different\n               versions of the scanner (agent).\n    filename\n    filepath\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"5.2) Output\n    licenses - comma separated license string\n    diff()   - difference (e.g. license difference between input files/trees)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'6) Output columns\n    &out="{column string}\n    e.g. &out="filename, licenses"\n')),(0,r.kt)("p",null,"Notes:\n1) There may be multiple ways to specify the same information. For example:\n&filename=foo.c\n&filepath=foo.c\n2) Authentication may be turned off for REST interface, or it may be specified\nin the http request."),(0,r.kt)("h2",{id:"query-examples"},"Query Examples"),(0,r.kt)("p",null,'1) Retrieve licenses for RPM pkg abc, version 123. As determined by the latest\nnomos run on the pkg.\nQuery: q=rpm&pkgname=abc&version=123&agent=nomos&agentrev=latest&out="licenses"\nOutput: "lic1, lic2, lic3"'),(0,r.kt)("p",null,'2) RPM package license history (defaults to latest agent scan)\nQuery: q=rpm?pkgname=abc&out="pkg_name,version,licenses"\nOutput: pkgname, pkgversion, "lic1, lic2, lic3"\nRepeat with lines for each version'),(0,r.kt)("p",null,'3) RPM package file licenses for each file in package abc for upload 12.\nQuery: q=rpm?pkgname=abc&upload=12&allfiles=yes&out="path,licenses"\nOutput: abc.rpm/a/b/foo, "lic1, lic2, lic3"\nRepeat for each file in the package'),(0,r.kt)("p",null,'4) Same as 3 but also report bucket file is in\nQuery: q=rpm?pkgname=abc&upload=12&allfiles=yes&out="path,bucket,licenses"\nOutput: abc.rpm/a/b/foo, "SHIP-HOLD", "lic1, lic2, lic3"\nRepeat for each file in the package'),(0,r.kt)("p",null,'5) Retrieve summary, pkg_arch for file Pound-2.4-0.1.d.fc8.src.rpm\nQuery: q=rpm?filename=Pound-2.4-0.1.d.fc8.src.rpm?out="summary, pkg_arch"\nThis example shows how packages can be treated as files. This is a query\ntype "rpm" because the output fields are from the package information.'),(0,r.kt)("p",null,'6) What licenses does file foo have?\nQuery: q=file&name=foo&agent=nomos&agentrev=latest&out="path, licenses"\nOutput: "x.tar/dir/foo, "lic1, lic2, lic3"\nRepeat for each foo in the repository'),(0,r.kt)("p",null,'7) Find file licenses for each file in foo.tar for upload 12.\nQuery: q=file?name=foo.tar&upload=12&allfiles=yes&out="path,licenses"\nOutput: foo.tar/a/b/xyz.c, "lic1, lic2, lic3"\nRepeat for each file in foo.tar.'),(0,r.kt)("p",null,"8) Retrieve the bucket history for all versions of pkg X and bucketpool Y"),(0,r.kt)("h2",{id:"package-fields"},"Package fields"),(0,r.kt)("p",null,"Here is the list of fields we save for packages. Each of these can be\nspecified as either an input or output field."),(0,r.kt)("p",null,"1) RPM package fields\npkg_name\npkg_alias\npkg_arch\nversion\nlicense\npkg_group\npackager\nrelease\nbuild_date\nvendor\nurl\nsource_rpm\nsummary\ndescription"),(0,r.kt)("p",null,"2) Debian package fields"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pkg_name \n    pkg_arch\n    version\n    section\n    priority\n    installed_size\n    maintainer\n    homepage\n    source\n    description\n    summary\n    format\n    uploaders\n    standards_version\n")),(0,r.kt)("p",null,"Fill out with other fields after api syntax is decided."),(0,r.kt)("p",null,"The API should be versioned (as in the OpenStack one) to allow for easy compatibility management and changes of interface with less issues."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"E.g. wget http://www.fossology.org/v1/license/get/GPL-V2\n")))}c.isMDXComponent=!0}}]);