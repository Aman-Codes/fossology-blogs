(self.webpackChunkfossology_blogs=self.webpackChunkfossology_blogs||[]).push([[3051],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,y=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return t?r.createElement(y,c(c({ref:n},p),{},{components:t})):r.createElement(y,c({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1626:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return a},toc:function(){return s},default:function(){return p}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),c={},a={unversionedId:"docs/Dependency-injection",id:"docs/Dependency-injection",isDocsHomePage:!1,title:"Dependency-injection",description:"Dependency injection",source:"@site/docs/docs/Dependency-injection.md",sourceDirName:"docs",slug:"/docs/Dependency-injection",permalink:"/fossology-blogs/docs/docs/Dependency-injection",editUrl:"https://github.com/Aman-Codes/fossology-blogs/edit/master/docs/docs/Dependency-injection.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Definition-of-Done",permalink:"/fossology-blogs/docs/docs/Definition-of-Done"},next:{title:"Documentation-Generation",permalink:"/fossology-blogs/docs/docs/Documentation-Generation"}},s=[{value:"Dependency injection",id:"dependency-injection",children:[]}],l={toc:s};function p(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"dependency-injection"},"Dependency injection"),(0,i.kt)("p",null,"Dependency injection is used to create singleton objects and their dependencies automatically. This is very useful when global objects should be available in a variety of objects."),(0,i.kt)("p",null,"Fossology currently uses the ",(0,i.kt)("a",{parentName:"p",href:"http://symfony.com/doc/current/components/dependency_injection/introduction.html"},"symfony dependency injection")," version v3.3.18."),(0,i.kt)("p",null,"The objects and their dependencies are configured in the XML file "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src/lib/php/services.xml\n")),(0,i.kt)("p",null,"A simple example of the configuration would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<container xmlns="http://symfony.com/schema/dic/services">\n\n    <services>\n        <service id="logger" class="\\Monolog\\Logger">\n            <argument type="string">default</argument>\n        </service>\n        <service id="db.manager" class="\\Fossology\\Lib\\Db\\DbManager">\n            <argument type="service" id="logger"/>\n        </service>\n    </services>\n</container>\n')),(0,i.kt)("p",null,"The dependency injection container is created in the file src/lib/php/common-container.php and stored in the global variable $container."),(0,i.kt)("p",null,"It can be used anywhere in the application like in the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"  global $container;\n  $dbManager = $container->get('db.manager');\n")))}p.isMDXComponent=!0}}]);