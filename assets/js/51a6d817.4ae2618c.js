(self.webpackChunkfossology_blogs=self.webpackChunkfossology_blogs||[]).push([[4142],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||a;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1696:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var o=n(2122),r=n(9756),a=(n(7294),n(3905)),i={},l={unversionedId:"docs/Setup-a-Chroot-environment",id:"docs/Setup-a-Chroot-environment",isDocsHomePage:!1,title:"Setup-a-Chroot-environment",description:"This page serves as guidelines to setup a Chroot environment to install and hack inside Fossology locally, on your own Linux machine.",source:"@site/docs/docs/Setup-a-Chroot-environment.md",sourceDirName:"docs",slug:"/docs/Setup-a-Chroot-environment",permalink:"/fossology-blogs/docs/docs/Setup-a-Chroot-environment",editUrl:"https://github.com/Aman-Codes/fossology-blogs/edit/master/docs/docs/Setup-a-Chroot-environment.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scheduler-Pre-2.0",permalink:"/fossology-blogs/docs/docs/Scheduler-Pre-2.0"},next:{title:"Introduction",permalink:"/fossology-blogs/docs/docs/Spasht-Agent"}},s=[{value:"Download and extract",id:"download-and-extract",children:[]},{value:"Install tooling",id:"install-tooling",children:[]},{value:"Running the Chroot",id:"running-the-chroot",children:[]},{value:"Prepare source code",id:"prepare-source-code",children:[]}],p={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This page serves as guidelines to setup a Chroot environment to install and hack inside Fossology locally, on your own Linux machine."),(0,a.kt)("h1",{id:"why-"},"Why ?"),(0,a.kt)("p",null,"This how to lets you setup a working local Fossology environment on a Linux machine within minutes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It's then easy to hack inside the source code and check the behaviour on your local host"),(0,a.kt)("li",{parentName:"ul"},"No dependency to be installed on your host machine"),(0,a.kt)("li",{parentName:"ul"},"Your working state can be backed up, and shared"),(0,a.kt)("li",{parentName:"ul"},"You can trash, refresh, maintain multiple Fossology setups simultaneously")),(0,a.kt)("h1",{id:"prepare--run"},"Prepare & Run"),(0,a.kt)("h2",{id:"download-and-extract"},"Download and extract"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Setup a Debian based Chroot as pdescribed here: ",(0,a.kt)("a",{parentName:"li",href:"https://wiki.debian.org/chroot"},"https://wiki.debian.org/chroot"))),(0,a.kt)("h2",{id:"install-tooling"},"Install tooling"),(0,a.kt)("p",null,"The guideline below apply to systems running ",(0,a.kt)("inlineCode",{parentName:"p"},"systemd"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Install ",(0,a.kt)("inlineCode",{parentName:"li"},"systemd-nspawn")," (see: ",(0,a.kt)("a",{parentName:"li",href:"http://0pointer.de/blog/projects/changing-roots"},"http://0pointer.de/blog/projects/changing-roots"),")"),(0,a.kt)("li",{parentName:"ol"},"Install package: ",(0,a.kt)("inlineCode",{parentName:"li"},"sudo apt install coreutils systemd-container")),(0,a.kt)("li",{parentName:"ol"},"You may want to copy you own SSH keys to ",(0,a.kt)("inlineCode",{parentName:"li"},"chroot/root/.ssh/")," (for ex. to pull from GitLab)")),(0,a.kt)("h2",{id:"running-the-chroot"},"Running the Chroot"),(0,a.kt)("p",null,"Enter the Chroot: ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo systemd-nspawn -D <chroot-dir>")),(0,a.kt)("p",null,"Once inside your Fossology Chroot, note that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If you exit the Chroot, the services running inside will be stopped"),(0,a.kt)("li",{parentName:"ul"},"You probably wan to use ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/tmux/tmux/wiki"},"tmux"),", to keep a working environment and services up."),(0,a.kt)("li",{parentName:"ul"},"Some directories need to be mounted, I use this script: ",(0,a.kt)("inlineCode",{parentName:"li"},"fix_var-run.sh"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p /run/\nmount -t tmpfs -o rw,noexec,nosuid,size=10%,mode=0755 tmpfs /run\nchmod 755 /run\nmkdir -p /run/lock\n")),(0,a.kt)("h2",{id:"prepare-source-code"},"Prepare source code"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"you can install required dependencies")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"you can ",(0,a.kt)("inlineCode",{parentName:"p"},"git clone")," the source code as usual.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"/!\\ To be able to git pull & push from inside the Chroot, you may need to copy you SSH keys in ",(0,a.kt)("inlineCode",{parentName:"p"},"/root/.ssh")," folder")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You can build and re-deploy Fossology:"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"(chroot)[root] /opt/fossology : make install\nmake -C install                                            \nmake[1]: Entering directory '/opt/fossology/install'    \nRegenerating variables list ...\n(...)\n")),(0,a.kt)("h1",{id:"run"},"Run"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can start the services with ",(0,a.kt)("inlineCode",{parentName:"li"},"/root/start-stop.sh start")," - see below"),(0,a.kt)("li",{parentName:"ul"},"Browse to http://localhost/repo/"),(0,a.kt)("li",{parentName:"ul"},"Login using default credentials: ",(0,a.kt)("inlineCode",{parentName:"li"},"fossy")," / ",(0,a.kt)("inlineCode",{parentName:"li"},"fossy"))),(0,a.kt)("p",null,"Content of ",(0,a.kt)("inlineCode",{parentName:"p"},"start-stop.sh")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n\n\n./fix_var-run.sh\n\nstart_stop() {\n    echo "--- $1  --------------------------------------------------------"\n    for service in postgresql apache2 fossology\n    do\n        echo "=z= $service"\n        service $service $1\n    done\n    echo\n}\n\ncase x$1 in\n    xstart|xstop) start_stop $1 ;;\n    *)\n        start_stop stop\n        start_stop start\n        ;;\nesac\n\necho "--------------------------------------------------------------------"\n\necho\necho "Listening on port 80 ?"\nss -lnp \'sport = 80\'\n')),(0,a.kt)("h1",{id:"backup--share-the-chroot"},"Backup & share the Chroot"),(0,a.kt)("p",null,"Before backing up, sharing, please consider that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"you may have installed you private SSH key"),(0,a.kt)("li",{parentName:"ul"},"you may have configured Git with your credentials")),(0,a.kt)("p",null,"You may consider the 2 following scripts that backup (excluding ",(0,a.kt)("inlineCode",{parentName:"p"},".ssh"),"and ",(0,a.kt)("inlineCode",{parentName:"p"},".gitconfig"),") and restore chroots:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n#\n# Script: chroot-backup.sh\n#\n\nout=chroot.cpio.gz\ndir=chroot\nif [ -s $out ]\nthen\n    echo "File $out exists, aborting"\n    exit 1\nfi\n\nsudo find $dir \\\n    -path "$dir/root/.ssh" -prune -o  \\\n    -path "$dir/root/.gitconfig" -prune -o \\\n    -print0 | \\\n     sudo cpio --null --create | gzip > $out\nls -l $out\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh -e\n#\n# Script: chroot-restore.sh\n#\n\nf_fatal() {\n    echo "$@"\n    exit 1\n}\n\nin=chroot.cpio.gz\n[ -n "$1" ] && in="$1"\n[ -s "$1" ] || f_fatal "Cannot find input file \'$in\'"\n\nhead_dir=$(gunzip -c $in | sudo cpio --list | head -n 1)\n\n# check that first entry is a directory\necho "$head_dir" | grep -q \'/\' && f_fatal "Head dir: $head_dir => problem"\n\n# Panic if destination directory aready exists\ntest -d "$head_dir" && f_fatal "Dir $head_dir already exists, aborting"\n\necho "Exctracting Chroot to \'$head_dir\'"\ngunzip -c $in | sudo cpio --extract \n\n')))}u.isMDXComponent=!0}}]);