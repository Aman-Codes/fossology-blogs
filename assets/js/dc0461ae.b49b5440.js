(self.webpackChunkfossology_blogs=self.webpackChunkfossology_blogs||[]).push([[2445],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),p=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,g=u["".concat(d,".").concat(m)]||u[m]||s[m]||i;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6220:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return d},default:function(){return c}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),o={},l={unversionedId:"docs/Ant-build-file-example-for-test-execution",id:"docs/Ant-build-file-example-for-test-execution",isDocsHomePage:!1,title:"Ant-build-file-example-for-test-execution",description:"This is an Ant build.xml file that executes some test. It has been moved to this location from the project root directory, because it might be worth preserving if someone would like to see how to do this in (Apache) Ant. But it was at that time not actively maintained anymore.",source:"@site/docs/docs/Ant-build-file-example-for-test-execution.md",sourceDirName:"docs",slug:"/docs/Ant-build-file-example-for-test-execution",permalink:"/fossology-blogs/docs/docs/Ant-build-file-example-for-test-execution",editUrl:"https://github.com/Aman-Codes/fossology-blogs/edit/master/docs/docs/Ant-build-file-example-for-test-execution.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Access-Control",permalink:"/fossology-blogs/docs/docs/Access-Control"},next:{title:"Autoloading",permalink:"/fossology-blogs/docs/docs/Autoloading"}},d=[],p={toc:d};function c(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is an Ant build.xml file that executes some test. It has been moved to this location from the project root directory, because it might be worth preserving if someone would like to see how to do this in (Apache) Ant. But it was at that time not actively maintained anymore."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n\n\x3c!--\nCopyright Siemens AG 2014\n\nCopying and distribution of this file, with or without modification,\nare permitted in any medium without royalty provided the copyright\nnotice and this notice are preserved.  This file is offered as-is,\nwithout any warranty.\n--\x3e\n\n<project name="name-of-project" default="build">\n    <target name="build"\n            depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdox,phpunit"/>\n\n    <target name="build-parallel"\n            depends="prepare,lint,tools-parallel,phpunit"/>\n\n    <target name="tools-parallel" description="Run tools in parallel">\n        <parallel threadCount="2">\n            <sequential>\n                <antcall target="pdepend"/>\n                <antcall target="phpmd-ci"/>\n            </sequential>\n            <antcall target="phpcpd"/>\n            <antcall target="phpcs-ci"/>\n            <antcall target="phploc"/>\n            <antcall target="phpdox"/>\n        </parallel>\n    </target>\n\n    <target name="clean" description="Cleanup build artifacts">\n        <delete dir="${basedir}/build/api"/>\n        <delete dir="${basedir}/build/coverage"/>\n        <delete dir="${basedir}/build/logs"/>\n        <delete dir="${basedir}/build/pdepend"/>\n    </target>\n\n    <target name="prepare" depends="clean" description="Prepare for build">\n        <mkdir dir="${basedir}/build/api"/>\n        <mkdir dir="${basedir}/build/coverage"/>\n        <mkdir dir="${basedir}/build/logs"/>\n        <mkdir dir="${basedir}/build/pdepend"/>\n        <mkdir dir="${basedir}/build/phpdox"/>\n    </target>\n\n    <target name="lint" description="Perform syntax check of sourcecode files">\n        <apply executable="php" failonerror="true">\n            <arg value="-l"/>\n\n            <fileset dir="${basedir}/src">\n                <include name="lib/php/**/*.php"/>\n                <include name="*/ui/**/*.php"/>\n                <include name="*/ui_tests/**/*.php"/>\n                <modified/>\n            </fileset>\n\n        </apply>\n    </target>\n\n    <target name="phploc" description="Measure project size using PHPLOC">\n        <exec executable="phploc">\n            <arg value="--count-tests"/>\n            <arg value="--log-csv"/>\n            <arg value="${basedir}/build/logs/phploc.csv"/>\n            <arg path="${basedir}/src"/>\n        </exec>\n    </target>\n\n    <target name="pdepend" description="Calculate software metrics using PHP_Depend">\n        <exec executable="pdepend">\n            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>\n            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>\n            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>\n            <arg path="${basedir}/src"/>\n        </exec>\n    </target>\n\n    <target name="phpmd"\n            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">\n        <exec executable="phpmd">\n            <arg path="${basedir}/src"/>\n            <arg value="text"/>\n            <arg value="${basedir}/build/phpmd.xml"/>\n        </exec>\n    </target>\n\n    <target name="phpmd-ci"\n            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">\n        <exec executable="phpmd">\n            <arg path="${basedir}/src"/>\n            <arg value="xml"/>\n            <arg value="${basedir}/build/phpmd.xml"/>\n            <arg value="--reportfile"/>\n            <arg value="${basedir}/build/logs/pmd.xml"/>\n        </exec>\n    </target>\n\n    <target name="phpcs"\n            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">\n        <exec executable="src/vendor/bin/phpcs">\n            <arg value="--standard=${basedir}/build/phpcs.xml"/>\n            <arg path="${basedir}/src"/>\n        </exec>\n    </target>\n\n    <target name="phpcs-ci"\n            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">\n        <exec executable="phpcs" output="/dev/null">\n            <arg value="--report=checkstyle"/>\n            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>\n            <arg value="--standard=${basedir}/build/phpcs.xml"/>\n            <arg path="${basedir}/src"/>\n        </exec>\n    </target>\n\n    <target name="phpcpd" description="Find duplicate code using PHPCPD">\n        <exec executable="phpcpd">\n            <arg value="--log-pmd"/>\n            <arg value="${basedir}/build/logs/pmd-cpd.xml"/>\n            <arg path="${basedir}/src"/>\n        </exec>\n    </target>\n\n    <target name="phpdox" description="Generate API documentation using phpDox">\n        <exec executable="phpdox"/>\n    </target>\n\n    <target name="phpunit" description="Run unit tests with PHPUnit">\n        <exec executable="src/vendor/bin/phpunit" failonerror="true"/>\n    </target>\n</project>\n')))}c.isMDXComponent=!0}}]);